// ../../../../usr/share/astal/gjs/gtk4/index.ts
import Astal6 from "gi://Astal?version=4.0";
import Gtk4 from "gi://Gtk?version=4.0";
import Gdk2 from "gi://Gdk?version=4.0";

// ../../../../usr/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../../usr/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;
var binding_default = Binding;

// ../../../../usr/share/astal/gjs/time.ts
import Astal from "gi://AstalIO";
var Time = Astal.Time;
function interval(interval2, callback) {
  return Astal.Time.interval(interval2, () => void callback?.());
}

// ../../../../usr/share/astal/gjs/process.ts
import Astal2 from "gi://AstalIO";
var Process = Astal2.Process;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal2.Process.subprocessv(cmd) : Astal2.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal2.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal2.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../usr/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = binding_default.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec === "function") {
      this.pollFn = exec;
      delete this.pollExec;
    } else {
      this.pollExec = exec;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var { derive } = Variable;
var variable_default = Variable;

// ../../../../usr/share/astal/gjs/_astal.ts
var noImplicitDestroy = Symbol("no no implicit destroy");
var setChildren = Symbol("children setter method");
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof binding_default ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof binding_default);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function construct(widget, config) {
  let { setup, child, children = [], ...props } = config;
  if (children instanceof binding_default) {
    children = [children];
  }
  if (child) {
    children.unshift(child);
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  const bindings = Object.keys(props).reduce((acc, prop) => {
    if (props[prop] instanceof binding_default) {
      const binding = props[prop];
      delete props[prop];
      return [...acc, [prop, binding]];
    }
    return acc;
  }, []);
  const onHandlers = Object.keys(props).reduce((acc, key) => {
    if (key.startsWith("on")) {
      const sig = kebabify(key).split("-").slice(1).join("-");
      const handler = props[key];
      delete props[key];
      return [...acc, [sig, handler]];
    }
    return acc;
  }, []);
  const mergedChildren = mergeBindings(children.flat(Infinity));
  if (mergedChildren instanceof binding_default) {
    widget[setChildren](mergedChildren.get());
    widget.connect("destroy", mergedChildren.subscribe((v) => {
      widget[setChildren](v);
    }));
  } else {
    if (mergedChildren.length > 0) {
      widget[setChildren](mergedChildren);
    }
  }
  for (const [signal, callback] of onHandlers) {
    const sig = signal.startsWith("notify") ? signal.replace("-", "::") : signal;
    if (typeof callback === "function") {
      widget.connect(sig, callback);
    } else {
      widget.connect(sig, () => execAsync(callback).then(print).catch(console.error));
    }
  }
  for (const [prop, binding] of bindings) {
    if (prop === "child" || prop === "children") {
      widget.connect("destroy", binding.subscribe((v) => {
        widget[setChildren](v);
      }));
    }
    widget.connect("destroy", binding.subscribe((v) => {
      setProp(widget, prop, v);
    }));
    setProp(widget, prop, binding.get());
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  Object.assign(widget, props);
  setup?.(widget);
  return widget;
}
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctors2, ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    if (isArrowFunction(ctors2[ctor]))
      return ctors2[ctor](props);
    return new ctors2[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}

// ../../../../usr/share/astal/gjs/gtk4/astalify.ts
import Gtk from "gi://Gtk?version=4.0";
import Gdk from "gi://Gdk?version=4.0";
var type = Symbol("child type");
var dummyBulder = new Gtk.Builder();
function _getChildren(widget) {
  if ("get_child" in widget && typeof widget.get_child == "function") {
    return widget.get_child() ? [widget.get_child()] : [];
  }
  const children = [];
  let ch = widget.get_first_child();
  while (ch !== null) {
    children.push(ch);
    ch = ch.get_next_sibling();
  }
  return children;
}
function _setChildren(widget, children) {
  children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
  for (const child of children) {
    widget.vfunc_add_child(
      dummyBulder,
      child,
      type in child ? child[type] : null
    );
  }
}
function astalify(cls, config = {}) {
  Object.assign(cls.prototype, {
    [setChildren](children) {
      const w = this;
      for (const child of config.getChildren?.(w) || _getChildren(w)) {
        if (child instanceof Gtk.Widget) {
          child.unparent();
          if (!children.includes(child) && noImplicitDestroy in this)
            child.run_dispose();
        }
      }
      if (config.setChildren) {
        config.setChildren(w, children);
      } else {
        _setChildren(w, children);
      }
    }
  });
  return {
    [cls.name]: (props = {}, ...children) => {
      const widget = new cls("cssName" in props ? { cssName: props.cssName } : {});
      if ("cssName" in props) {
        delete props.cssName;
      }
      if (props.noImplicitDestroy) {
        Object.assign(widget, { [noImplicitDestroy]: true });
        delete props.noImplicitDestroy;
      }
      if (props.type) {
        Object.assign(widget, { [type]: props.type });
        delete props.type;
      }
      if (children.length > 0) {
        Object.assign(props, { children });
      }
      return construct(widget, setupControllers(widget, props));
    }
  }[cls.name];
}
function setupControllers(widget, {
  onFocusEnter,
  onFocusLeave,
  onKeyPressed,
  onKeyReleased,
  onKeyModifier,
  onLegacy,
  onButtonPressed,
  onButtonReleased,
  onHoverEnter,
  onHoverLeave,
  onMotion,
  onScroll,
  onScrollDecelerate,
  ...props
}) {
  if (onFocusEnter || onFocusLeave) {
    const focus = new Gtk.EventControllerFocus();
    widget.add_controller(focus);
    if (onFocusEnter)
      focus.connect("enter", () => onFocusEnter(widget));
    if (onFocusLeave)
      focus.connect("leave", () => onFocusLeave(widget));
  }
  if (onKeyPressed || onKeyReleased || onKeyModifier) {
    const key = new Gtk.EventControllerKey();
    widget.add_controller(key);
    if (onKeyPressed)
      key.connect("key-pressed", (_, val, code, state) => onKeyPressed(widget, val, code, state));
    if (onKeyReleased)
      key.connect("key-released", (_, val, code, state) => onKeyReleased(widget, val, code, state));
    if (onKeyModifier)
      key.connect("modifiers", (_, state) => onKeyModifier(widget, state));
  }
  if (onLegacy || onButtonPressed || onButtonReleased) {
    const legacy = new Gtk.EventControllerLegacy();
    widget.add_controller(legacy);
    legacy.connect("event", (_, event) => {
      if (event.get_event_type() === Gdk.EventType.BUTTON_PRESS) {
        onButtonPressed?.(widget, event);
      }
      if (event.get_event_type() === Gdk.EventType.BUTTON_RELEASE) {
        onButtonReleased?.(widget, event);
      }
      onLegacy?.(widget, event);
    });
  }
  if (onMotion || onHoverEnter || onHoverLeave) {
    const hover = new Gtk.EventControllerMotion();
    widget.add_controller(hover);
    if (onHoverEnter)
      hover.connect("enter", (_, x, y) => onHoverEnter(widget, x, y));
    if (onHoverLeave)
      hover.connect("leave", () => onHoverLeave(widget));
    if (onMotion)
      hover.connect("motion", (_, x, y) => onMotion(widget, x, y));
  }
  if (onScroll || onScrollDecelerate) {
    const scroll = new Gtk.EventControllerScroll();
    scroll.flags = Gtk.EventControllerScrollFlags.BOTH_AXES | Gtk.EventControllerScrollFlags.KINETIC;
    widget.add_controller(scroll);
    if (onScroll)
      scroll.connect("scroll", (_, x, y) => onScroll(widget, x, y));
    if (onScrollDecelerate)
      scroll.connect("decelerate", (_, x, y) => onScrollDecelerate(widget, x, y));
  }
  return props;
}

// ../../../../usr/share/astal/gjs/gtk4/app.ts
import GLib from "gi://GLib?version=2.0";
import Gtk2 from "gi://Gtk?version=4.0";
import Astal4 from "gi://Astal?version=4.0";

// ../../../../usr/share/astal/gjs/overrides.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalCava"), ({ Cava: Cava2 }) => {
  patch(Cava2.prototype, "values");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace: Workspace2 }) => {
  patch(Hyprland.prototype, "binds");
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace2.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris: Mpris2, Player }) => {
  patch(Mpris2.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalRiver"), ({ River }) => {
  patch(River.prototype, "outputs");
});
await suppress(import("gi://AstalTray"), ({ Tray: Tray2 }) => {
  patch(Tray2.prototype, "items");
});
await suppress(import("gi://AstalWp"), ({ Wp: Wp2, Audio, Video, Node, Endpoint, Device }) => {
  patch(Wp2.prototype, "nodes");
  patch(Wp2.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
  patch(Endpoint.prototype, "routes");
  patch(Node.prototype, "channels");
  patch(Device.prototype, "profiles");
  patch(Device.prototype, "routes");
  patch(Device.prototype, "input_routes");
  patch(Device.prototype, "inputRoutes");
  patch(Device.prototype, "output_routes");
  patch(Device.prototype, "outputRoutes");
});

// ../../../../usr/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../usr/share/astal/gjs/gtk4/app.ts
Gtk2.init();
GLib.unsetenv("LD_PRELOAD");
await import("gi://Adw?version=1").then(({ default: Adw }) => Adw.init()).catch(() => void 0);
var app_default = mkApp(Astal4.Application);

// ../../../../usr/share/astal/gjs/gtk4/widget.ts
import Astal5 from "gi://Astal?version=4.0";
import Gtk3 from "gi://Gtk?version=4.0";
function filter(children) {
  return children.flat(Infinity).map((ch) => ch instanceof Gtk3.Widget ? ch : new Gtk3.Label({ visible: true, label: String(ch) }));
}
Object.defineProperty(Astal5.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = astalify(Astal5.Box, {
  getChildren(self) {
    return self.get_children();
  },
  setChildren(self, children) {
    return self.set_children(filter(children));
  }
});
var Button = astalify(Gtk3.Button);
var CenterBox = astalify(Gtk3.CenterBox, {
  getChildren(box) {
    return [box.startWidget, box.centerWidget, box.endWidget];
  },
  setChildren(box, children) {
    const ch = filter(children);
    box.startWidget = ch[0] || new Gtk3.Box();
    box.centerWidget = ch[1] || new Gtk3.Box();
    box.endWidget = ch[2] || new Gtk3.Box();
  }
});
var Entry = astalify(Gtk3.Entry, {
  getChildren() {
    return [];
  }
});
var Image = astalify(Gtk3.Image, {
  getChildren() {
    return [];
  }
});
var Label = astalify(Gtk3.Label, {
  getChildren() {
    return [];
  },
  setChildren(self, children) {
    self.label = String(children);
  }
});
var LevelBar = astalify(Gtk3.LevelBar, {
  getChildren() {
    return [];
  }
});
var Overlay = astalify(Gtk3.Overlay, {
  getChildren(self) {
    const children = [];
    let ch = self.get_first_child();
    while (ch !== null) {
      children.push(ch);
      ch = ch.get_next_sibling();
    }
    return children.filter((ch2) => ch2 !== self.child);
  },
  setChildren(self, children) {
    for (const child of filter(children)) {
      const types = type in child ? child[type].split(/\s+/) : [];
      if (types.includes("overlay")) {
        self.add_overlay(child);
      } else {
        self.set_child(child);
      }
      self.set_measure_overlay(child, types.includes("measure"));
      self.set_clip_overlay(child, types.includes("clip"));
    }
  }
});
var Revealer = astalify(Gtk3.Revealer);
var Slider = astalify(Astal5.Slider, {
  getChildren() {
    return [];
  }
});
var Stack = astalify(Gtk3.Stack, {
  setChildren(self, children) {
    for (const child of filter(children)) {
      if (child.name != "" && child.name != null) {
        self.add_named(child, child.name);
      } else {
        self.add_child(child);
      }
    }
  }
});
var Switch = astalify(Gtk3.Switch, {
  getChildren() {
    return [];
  }
});
var Window = astalify(Astal5.Window);
var MenuButton = astalify(Gtk3.MenuButton, {
  getChildren(self) {
    return [self.popover, self.child];
  },
  setChildren(self, children) {
    for (const child of filter(children)) {
      if (child instanceof Gtk3.Popover) {
        self.set_popover(child);
      } else {
        self.set_child(child);
      }
    }
  }
});
var Popover = astalify(Gtk3.Popover);

// sass:/home/itiro/.config/ags/styles/index.scss
var styles_default = '/* Catppuccin mocha colors */\n.Media .MprisInfo, .Workspaces, .Clients, .AudioControl, .CpuUsage, .Battery, .MemoryUsage, .Time {\n  background: none;\n  padding: 2px 4px;\n  margin: 2px 4px;\n  border: none;\n  border-radius: 18px;\n}\n.Media .MprisInfo *, .Workspaces *, .Clients *, .AudioControl *, .CpuUsage *, .Battery *, .MemoryUsage *, .Time * {\n  margin: 0px 2px;\n}\n\n.Time {\n  background-color: rgba(49, 50, 68, 0.6);\n  border-radius: 16px;\n  margin: 4px;\n}\n\n.MemoryUsage {\n  background: none;\n  color: #fab387;\n  transition: all 0.3s ease;\n}\n.MemoryUsage:hover {\n  background: #fab387;\n  color: #1e1e2e;\n}\n\n.Battery {\n  border-radius: 20px;\n}\n.Battery .BatteryIcon, .Battery .BatteryLabel {\n  color: #b4befe;\n}\n\n.BatteryCritical {\n  background-color: #f38ba8;\n}\n.BatteryCritical .BatteryIcon, .BatteryCritical .BatteryUsageLabel {\n  color: #11111b;\n}\n\n.CpuUsage {\n  background: none;\n  color: #a6e3a1;\n  transition: all 0.3s ease;\n}\n.CpuUsage:hover {\n  background: #a6e3a1;\n  color: #1e1e2e;\n}\n\n.AudioControl {\n  transition: all 0.3s ease;\n  background: none;\n}\n.AudioControl * {\n  color: #cdd6f4;\n}\n.AudioControl:hover {\n  background: #89b4fa;\n}\n.AudioControl:hover * {\n  color: #1e1e2e;\n}\n\n.Clients {\n  background-color: rgba(17, 17, 27, 0.8);\n  transition: all 0.25s ease;\n}\n.Clients:hover {\n  background-color: rgba(137, 180, 250, 0.8);\n}\n.Clients:hover .Client {\n  color: #11111b;\n}\n.Clients .ClientsPopover {\n  background-color: rgba(49, 50, 68, 0.8);\n  border-radius: 16px;\n  padding: 6px;\n}\n.Clients .ClientsPopover .ClientEntry {\n  background-color: rgba(69, 71, 90, 0.8);\n  border-radius: 16px;\n  padding: 4px;\n  margin: 2px;\n  transition: all 0.25s ease;\n}\n.Clients .ClientsPopover .ClientEntry:hover {\n  background-color: rgba(137, 180, 250, 0.8);\n  color: #45475a;\n}\n\n.Workspaces {\n  background-color: rgba(49, 50, 68, 0.8);\n  padding: 2px 4px;\n  margin: 2px;\n  border-radius: 18px;\n}\n.Workspaces .Workspace, .Workspaces .WorkspacePopoverItem, .Workspaces .MoreWorkspacesButton {\n  font-weight: bold;\n  background-color: rgba(17, 17, 27, 0.8);\n  border: none;\n  border-radius: 50%;\n  padding: 0;\n  margin: 2px;\n  transition: all 0.2s ease;\n  min-width: 24px;\n  min-height: 24px;\n}\n.Workspaces .MoreWorkspacesButton {\n  transition: all 0.3s ease;\n  background: none;\n}\n.Workspaces .MoreWorkspacesButton * {\n  color: #cdd6f4;\n}\n.Workspaces .MoreWorkspacesButton:hover {\n  background: #89b4fa;\n}\n.Workspaces .MoreWorkspacesButton:hover * {\n  color: #1e1e2e;\n}\n.Workspaces .Active {\n  background-color: rgba(137, 180, 250, 0.9);\n  color: #11111b;\n  font-weight: 700;\n}\n.Workspaces .Inactive {\n  transition: all 0.2s ease;\n}\n.Workspaces .Inactive:hover {\n  background-color: rgba(137, 180, 250, 0.6);\n  color: #11111b;\n}\n.Workspaces .Inactive:focus {\n  background-color: rgba(137, 180, 250, 0.4);\n}\n.Workspaces .WorkspacePopover {\n  border-radius: 16px;\n  padding: 6px;\n  background-color: rgba(49, 50, 68, 0.95);\n  margin: 2px;\n}\n\n.TrayItem {\n  padding: 2px 4px;\n  border-radius: 16px;\n  margin: 2px;\n  -gtk-icon-size: 18px;\n  transition: all 0.25s ease;\n}\n.TrayItem:hover {\n  background-color: rgba(137, 180, 250, 0.8);\n  color: #11111b;\n}\n.TrayItem:active {\n  background-color: rgba(137, 180, 250, 0.6);\n  color: #11111b;\n}\n.TrayItem popover.menu {\n  margin: 10px;\n  background-color: #313244;\n  border-radius: 10px;\n}\n.TrayItem popover.menu modelbutton {\n  padding: 2px;\n  border-radius: 4px;\n  margin: 0 2px;\n}\n.TrayItem popover.menu modelbutton:hover {\n  background: rgba(69, 71, 90, 0.2);\n}\n.TrayItem popover.menu modelbutton:active {\n  background: rgba(69, 71, 90, 0.4);\n}\n\n.Media .MprisInfo {\n  background-color: rgba(49, 50, 68, 0.8);\n  border-radius: 20px;\n  transition: all 0.25s ease;\n}\n.Media .MprisInfo:hover {\n  background-color: rgba(137, 180, 250, 0.8);\n  color: #11111b;\n}\n.Media .MprisPlayer {\n  background-color: rgba(17, 17, 27, 0.6);\n}\n.Media .MprisPlayer .Cava, .Media .MprisPlayer .Cava > * {\n  margin: 0;\n  padding: 0;\n  color: rgba(137, 180, 250, 0.8);\n}\n.Media .MprisPlayer .PlayerInfo {\n  padding: 16px;\n}\n.Media .MprisPlayer .PlayerInfo .Info {\n  margin-left: 12px;\n}\n.Media .MprisPlayer .PlayerInfo .Info .Title {\n  font-size: 20px;\n  color: #cdd6f4;\n}\n.Media .MprisPlayer .PlayerInfo .Info .Artist {\n  font-size: 18px;\n  color: rgba(205, 214, 244, 0.7);\n}\n.Media .MprisPlayer .PlayerInfo .Info .Album {\n  font-size: 16px;\n  color: rgba(205, 214, 244, 0.5);\n  font-style: italic;\n}\n.Media .MprisPlayer .PlayerInfo .LowerPart {\n  margin-top: 12px;\n  padding: 12px;\n}\n.Media .MprisPlayer .PlayerInfo .LowerPart .PlayerSlider {\n  padding: 4px;\n  background-color: rgba(17, 17, 27, 0.8);\n  border: none;\n  border-radius: 14px;\n  margin: 5px;\n}\n.Media .MprisPlayer .PlayerInfo .LowerPart .PlayerSlider .Slider {\n  min-width: 160px;\n  min-height: 1px;\n}\n.Media .MprisPlayer .PlayerInfo .LowerPart .PlayerSlider .Slider highlight {\n  background-color: #89b4fa;\n}\n.Media .MprisPlayer .PlayerInfo .LowerPart .PlayerSlider .TimeLabel {\n  margin-left: 10px;\n  font-size: 0.9em;\n  opacity: 0.8;\n  min-width: 40px;\n}\n.Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .Previous, .Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .PlayPause, .Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .Next {\n  transition: all 0.25s ease;\n  margin: 4px;\n  background: #1e1e2e;\n  border: none;\n  border-radius: 8px;\n}\n.Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .Previous image, .Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .PlayPause image, .Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .Next image {\n  margin: 12px;\n  color: #89b4fa;\n}\n.Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .Previous:hover, .Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .PlayPause:hover, .Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .Next:hover {\n  background: #89b4fa;\n}\n.Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .Previous:hover image, .Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .PlayPause:hover image, .Media .MprisPlayer .PlayerInfo .LowerPart .Controllers .Next:hover image {\n  color: #1e1e2e;\n}\n\n/* Resetting every decoration applied earlier */\n* {\n  font-family: "Monospace";\n  font-size: 16px;\n  -gtk-icon-size: 24px;\n  color: #cdd6f4;\n  background: none;\n  border: none;\n  box-shadow: none;\n  outline: none;\n  margin: 0;\n  padding: 0;\n}\n\n.Bar {\n  background: #1e1e2e;\n  border-radius: 20px;\n  margin: 4px 6px;\n  padding: 1px;\n}';

// modules/SystemMonitor.tsx
import AstalBattery from "gi://AstalBattery";

// ../../../../usr/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../usr/share/astal/gjs/file.ts
import Astal7 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";

// ../../../../usr/share/astal/gjs/gobject.ts
import GObject2 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject2;

// modules/SystemMonitor.tsx
import GTop from "gi://GTop?version=2.0";

// ../../../../usr/share/astal/gjs/gtk4/jsx-runtime.ts
function jsx2(ctor, props) {
  return jsx(ctors, ctor, props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  // circularprogress: Widget.CircularProgress,
  // drawingarea: Widget.DrawingArea,
  entry: Entry,
  image: Image,
  label: Label,
  levelbar: LevelBar,
  overlay: Overlay,
  revealer: Revealer,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window,
  menubutton: MenuButton,
  popover: Popover
};
var jsxs = jsx2;

// modules/SystemMonitor.tsx
var formatTime = (seconds) => `${Math.floor(seconds / 3600)}h${Math.floor(seconds % 3600 / 60)}m`;
var POLL_INTERVAL = 3e3;
var cpu = new GTop.glibtop_cpu();
var mem = new GTop.glibtop_mem();
var battery = AstalBattery.get_default();
var cpuData = {
  prev: { user: 0, sys: 0, total: 0 },
  diff: { user: 0, sys: 0, total: 0 }
};
GTop.glibtop_get_cpu(cpu);
cpuData.prev.user = cpu.user;
cpuData.prev.sys = cpu.sys;
cpuData.prev.total = cpu.total;
var calculateMetrics = () => {
  try {
    const prevUser = cpuData.prev.user;
    const prevSys = cpuData.prev.sys;
    const prevTotal = cpuData.prev.total;
    GTop.glibtop_get_cpu(cpu);
    GTop.glibtop_get_mem(mem);
    cpuData.diff.user = cpu.user - prevUser;
    cpuData.diff.sys = cpu.sys - prevSys;
    cpuData.diff.total = cpu.total - prevTotal;
    cpuData.prev.user = cpu.user;
    cpuData.prev.sys = cpu.sys;
    cpuData.prev.total = cpu.total;
    const cpuPercent = cpuData.diff.total > 0 ? Math.round((cpuData.diff.user + cpuData.diff.sys) / cpuData.diff.total * 100) : 0;
    const memPercent = mem.total > 0 ? Math.round(mem.user / mem.total * 100) : 0;
    return {
      cpu: Math.max(0, Math.min(100, cpuPercent)),
      mem: Math.max(0, Math.min(100, memPercent))
    };
  } catch (error) {
    console.warn("Erro ao obter m\xE9tricas do sistema:", error);
    return { cpu: 0, mem: 0 };
  }
};
var metrics = Variable({ cpu: 0, mem: 0 }).poll(POLL_INTERVAL, calculateMetrics);
var CpuUsage = () => /* @__PURE__ */ jsx2("label", { cssClasses: ["CpuUsage"], label: bind(metrics).as((m) => `CPU: ${m.cpu}%`) });
var MemoryUsage = () => /* @__PURE__ */ jsx2("label", { cssClasses: ["MemoryUsage"], label: bind(metrics).as((m) => `MEM: ${m.mem}%`) });
var batteryHandler = null;
var Battery = () => {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: ["Battery"],
      tooltipText: bind(battery, "charging").as(() => {
        try {
          const isCharging = battery.get_charging();
          const timeRemaining = isCharging ? battery.time_to_full : battery.time_to_empty;
          const action = isCharging ? "Carregando" : "Descarregando";
          return `${action}: ${formatTime(timeRemaining)} restante(s)`;
        } catch {
          return "Informa\xE7\xF5es da bateria indispon\xEDveis";
        }
      }),
      setup: (self) => {
        if (batteryHandler) {
          battery.disconnect(batteryHandler);
        }
        batteryHandler = battery.connect("notify::charging", () => {
          try {
            const isCritical = battery.percentage <= 0.2 && !battery.charging;
            if (isCritical) self.add_css_class("BatteryCritical");
            else self.remove_css_class("BatteryCritical");
          } catch (error) {
            console.warn("Erro ao verificar status da bateria:", error);
          }
        });
      },
      onDestroy: () => {
        if (batteryHandler) {
          battery.disconnect(batteryHandler);
          batteryHandler = null;
        }
      },
      children: [
        /* @__PURE__ */ jsx2("image", { cssClasses: ["BatteryIcon"], iconName: bind(battery, "iconName") }),
        /* @__PURE__ */ jsx2(
          "label",
          {
            cssClasses: ["BatteryUsageLabel"],
            label: bind(battery, "percentage").as((p) => {
              try {
                return `${Math.round(Math.max(0, Math.min(100, p * 100)))}%`;
              } catch {
                return "0%";
              }
            })
          }
        )
      ]
    }
  );
};
function SystemMonitor() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: ["SystemMonitor"],
      onDestroy: () => {
        metrics.drop();
        if (batteryHandler) {
          battery.disconnect(batteryHandler);
          batteryHandler = null;
        }
      },
      children: [
        /* @__PURE__ */ jsx2(CpuUsage, {}),
        /* @__PURE__ */ jsx2(MemoryUsage, {}),
        /* @__PURE__ */ jsx2(Battery, {})
      ]
    }
  );
}

// modules/AudioControl.tsx
import Wp from "gi://AstalWp";
var audio = Wp.get_default().defaultSpeaker;
var step = 0.02;
var handleScroll = (controler, dx, dy) => {
  let newVolume = audio.get_volume();
  if (dy < 0) newVolume += step;
  else newVolume -= step;
  audio.set_volume(newVolume);
};
function AudioControl() {
  const scroll = new Gtk4.EventControllerScroll({ flags: Gtk4.EventControllerScrollFlags.VERTICAL });
  const click = { left: new Gtk4.GestureClick(), right: new Gtk4.GestureClick() };
  click.left.set_button(Gdk2.BUTTON_PRIMARY);
  click.right.set_button(Gdk2.BUTTON_SECONDARY);
  const handlers = {
    scroll: scroll.connect("scroll", handleScroll),
    mouse: {
      left: click.left.connect("pressed", () => {
        audio.set_mute(!audio.get_mute());
      }),
      right: click.right.connect("pressed", () => {
        default2.spawn_command_line_async("pavucontrol");
      })
    }
  };
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: ["AudioControl"],
      setup: (self) => {
        self.add_controller(click.left);
        self.add_controller(click.right);
        self.add_controller(scroll);
      },
      onDestroy: () => {
        scroll.disconnect(handlers.scroll);
        click.left.disconnect(handlers.mouse.left);
        click.right.disconnect(handlers.mouse.right);
      },
      tooltipText: bind(audio, "description").as((n) => `Dispositivo atual: ${n}`),
      children: [
        /* @__PURE__ */ jsx2("image", { cssClasses: ["AudioIcon"], iconName: bind(audio, "volumeIcon") }),
        /* @__PURE__ */ jsx2("label", { cssClasses: ["AudioLabel"], label: bind(audio, "volume").as((a) => `${Math.round(a * 100)}%`) })
      ]
    }
  );
}

// modules/SystemTray.tsx
import Tray from "gi://AstalTray";
var tray = Tray.get_default();
function TrayItem({ item }) {
  let handlers = {
    primary: 0,
    middle: 0,
    secondary: 0,
    menuModel: 0,
    actionG: 0
  };
  const clickPrimary = new Gtk4.GestureClick({ button: Gdk2.BUTTON_PRIMARY });
  const clickSecondary = new Gtk4.GestureClick({ button: Gdk2.BUTTON_SECONDARY });
  const clickMiddle = new Gtk4.GestureClick({ button: Gdk2.BUTTON_MIDDLE });
  return /* @__PURE__ */ jsx2(
    "menubutton",
    {
      cssClasses: ["TrayItem"],
      tooltipText: bind(item, "tooltipMarkup"),
      menuModel: item.menuModel,
      direction: Gtk4.ArrowType.DOWN,
      setup: (self) => {
        handlers = {
          primary: clickPrimary.connect("pressed", (_self, _n, x, y) => {
            if (item.is_menu) self.get_popover().popup();
            else item.activate(x, y);
          }),
          middle: clickMiddle.connect("pressed", (_self, _n, x, y) => {
            item.secondary_activate(x, y);
          }),
          secondary: clickSecondary.connect("pressed", () => {
            item.about_to_show();
            self.get_popover().popup();
          }),
          menuModel: item.connect("notify::menu-model", () => {
            self.set_menu_model(item.menuModel);
          }),
          actionG: item.connect("notify::action-group", () => {
            self.insert_action_group("dbusmenu", item.actionGroup);
          })
        };
        self.add_controller(clickPrimary);
        self.add_controller(clickMiddle);
        self.add_controller(clickSecondary);
      },
      onDestroy: (self) => {
        clickPrimary.disconnect(handlers.primary);
        clickMiddle.disconnect(handlers.middle);
        clickSecondary.disconnect(handlers.secondary);
        item.disconnect(handlers.menuModel);
        item.disconnect(handlers.actionG);
        self.remove_controller(clickPrimary);
        self.remove_controller(clickMiddle);
        self.remove_controller(clickSecondary);
      },
      child: /* @__PURE__ */ jsx2("image", { gicon: bind(item, "gicon"), pixelSize: 16 })
    }
  );
}
function SystemTray() {
  return /* @__PURE__ */ jsx2("box", { cssClasses: ["SystemTray"], orientation: Gtk4.Orientation.HORIZONTAL, spacing: 4, marginEnd: 8, children: bind(tray, "items").as((items) => items.map((item) => /* @__PURE__ */ jsx2(TrayItem, { item }))) });
}

// modules/DateTime.tsx
var time = Variable({ clock: "", date: "" }).poll(
  6e4,
  () => {
    const dateConstructor = /* @__PURE__ */ new Date();
    return {
      clock: dateConstructor.toLocaleTimeString("pt-br", { hour: "2-digit", minute: "2-digit" }),
      date: dateConstructor.toLocaleDateString("pt-br", { weekday: "long", day: "numeric", month: "long", year: "numeric" }).replace(/^./, (char) => char.toUpperCase())
    };
  }
);
function MiniTime() {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      cssClasses: ["Time"],
      onDestroy: () => time.drop(),
      label: bind(time).as((t) => `${t.clock}`)
    }
  );
}

// modules/Media.tsx
import Mpris from "gi://AstalMpris";

// modules/Cava.tsx
import Gsk from "gi://Gsk";
import AstalCava from "gi://AstalCava?version=0.1";
import GObject3 from "gi://GObject";
var CavaConfig = {
  autosens: true,
  bars: 20,
  barWidth: 20,
  barHeight: 160,
  framerate: 60,
  input: AstalCava.Input.PIPEWIRE,
  noiseReduction: 0.77,
  sensitivity: 0.75,
  stereo: false,
  lerpFactor: 1
};
var cavaInstance = AstalCava.get_default();
if (!cavaInstance) console.log("Cava instance not found");
cavaInstance?.set_autosens(CavaConfig.autosens);
cavaInstance?.set_bars(CavaConfig.bars);
cavaInstance?.set_framerate(CavaConfig.framerate);
cavaInstance?.set_input(CavaConfig.input);
cavaInstance?.set_noise_reduction(CavaConfig.noiseReduction);
cavaInstance?.set_stereo(CavaConfig.stereo);
var CavaWidget = class extends Gtk4.DrawingArea {
  values;
  norm;
  _handler = null;
  _lastWidth = 0;
  _lastHeight = 0;
  _pathBuilder = null;
  constructor() {
    super();
    this.setupRect();
    this.setupCava();
    this.set_hexpand(true);
    this.set_vexpand(true);
  }
  setupRect() {
    this.values = new Float32Array(CavaConfig.bars);
    this.norm = new Float32Array(CavaConfig.bars);
    this.add_css_class("Container");
  }
  setupCava() {
    try {
      if (cavaInstance && !this._handler) {
        this._handler = cavaInstance.connect("notify::values", () => {
          if (this.get_mapped() && this.get_realized()) {
            this.queue_draw();
          }
        });
      }
    } catch (error) {
      console.warn("Erro ao configurar Cava:", error);
    }
  }
  vfunc_size_allocate(width, height, baseline) {
    super.vfunc_size_allocate(width, height, baseline);
    if (this._lastWidth !== width || this._lastHeight !== height) {
      this._lastWidth = width;
      this._lastHeight = height;
      this._pathBuilder = null;
      this.queue_draw();
    }
  }
  vfunc_snapshot(snapshot) {
    if (!cavaInstance || !this.get_mapped()) return;
    try {
      const width = this.get_allocated_width();
      const height = this.get_allocated_height();
      if (width <= 0 || height <= 0) return;
      this.draw_catmull_rom(snapshot, width, height);
    } catch (error) {
      console.warn("Erro no snapshot do Cava:", error);
    }
  }
  draw_catmull_rom(snapshot, width, height) {
    if (!cavaInstance || !mediaState.get().lastPlayer) return;
    try {
      const raw = cavaInstance.get_values() || null;
      if (!raw || raw.length === 0) return;
      const bars = Math.min(CavaConfig.bars, raw.length);
      if (bars === 0) return;
      const barWidth = width / (bars - 1);
      const color = this.parent.get_color();
      const sens = CavaConfig.sensitivity;
      const lerp = CavaConfig.lerpFactor;
      const invSix = 1 / 6;
      for (let i = 0; i < bars; i++) {
        const vRaw = (raw[i] || 0) * sens;
        const v = this.values[i] += (vRaw - this.values[i]) * lerp;
        this.norm[i] = height - height * Math.max(0, Math.min(1, v));
      }
      const builder = this._pathBuilder = new Gsk.PathBuilder();
      builder.move_to(0, this.norm[0]);
      for (let i = 0; i < bars - 1; i++) {
        const p0x = (i - 1) * barWidth;
        const p0y = this.norm[Math.max(0, i - 1)];
        const p1x = i * barWidth;
        const p1y = this.norm[i];
        const p2x = (i + 1) * barWidth;
        const p2y = this.norm[i + 1];
        const p3x = (i + 2) * barWidth;
        const p3y = this.norm[Math.min(bars - 1, i + 2)];
        const c1x = p1x + (p2x - p0x) * invSix;
        const c1y = p1y + (p2y - p0y) * invSix;
        const c2x = p2x - (p3x - p1x) * invSix;
        const c2y = p2y - (p3y - p1y) * invSix;
        builder.cubic_to(c1x, c1y, c2x, c2y, p2x, p2y);
      }
      builder.line_to(width, height);
      builder.line_to(0, height);
      builder.close();
      const path = builder.to_path();
      if (path) {
        snapshot.append_fill(path, Gsk.FillRule.WINDING, color);
      }
    } catch (error) {
      console.warn("Erro ao desenhar Cava:", error);
    }
  }
  destroy() {
    if (this._handler && cavaInstance) {
      try {
        cavaInstance.disconnect(this._handler);
      } catch (error) {
        console.warn("Erro ao desconectar handler:", error);
      }
      this._handler = null;
    }
    if (this.values) {
      this.values.fill(0);
    }
    if (this.norm) {
      this.norm.fill(0);
    }
    this._pathBuilder = null;
  }
};
var _cava = GObject3.registerClass({ GTypeName: "Cava" }, CavaWidget);
function Cava() {
  return /* @__PURE__ */ jsx2("box", { cssClasses: ["Cava"], overflow: Gtk4.Overflow.HIDDEN, child: new _cava() });
}

// modules/Media.tsx
var PlayerButtonIcons = {
  playing: "media-playback-start-symbolic",
  paused: "media-playback-pause-symbolic",
  stop: "media-playback-stop-symbolic",
  next: "media-skip-forward-symbolic",
  previous: "media-skip-backward-symbolic"
};
var mediaState = Variable({
  currentState: Mpris.PlaybackStatus.STOPPED,
  currentCss: "stopped",
  lastPlayer: null,
  handlers: []
});
var playerDuration = Variable({ position: 0, duration: 0 });
var progressPercent = Variable(0);
var updateTimeout = null;
var retryTimeout = null;
var positionTimer = null;
var savedPosition = 0;
var lastUpdateTime = 0;
var DEBOUNCE_DELAY = 100;
var RETRY_DELAY = 1e3;
var MAX_RETRIES = 5;
var POSITION_UPDATE_INTERVAL = 1e3;
var retryCount = 0;
var mpris = Mpris.get_default();
function formatState(state) {
  switch (state) {
    case Mpris.PlaybackStatus.PLAYING:
      return "Tocando";
    case Mpris.PlaybackStatus.PAUSED:
      return "Pausado";
    case Mpris.PlaybackStatus.STOPPED:
      return "Nada tocando";
    default:
      return "Estado desconhecido";
  }
}
function formatTime2(seconds) {
  if (!seconds || seconds < 0) return "0:00";
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor(seconds % 3600 / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  if (hours > 0) {
    return `${hours}:${minutes.toString().padStart(2, "0")}:${remainingSeconds.toString().padStart(2, "0")}`;
  } else {
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
  }
}
function updatePosition() {
  const player = mediaState.get().lastPlayer;
  if (!player || !isPlayerValid(player)) {
    playerDuration.set({ duration: 0, position: 0 });
    progressPercent.set(0);
    return;
  }
  try {
    savedPosition = player.position || 0;
    lastUpdateTime = Date.now();
    const duration = player.length || 0;
    playerDuration.set({ duration, position: savedPosition });
    if (duration > 0) {
      const percent = savedPosition / duration * 100;
      progressPercent.set(Math.min(100, Math.max(0, percent)));
    } else {
      progressPercent.set(0);
    }
  } catch (error) {
    console.warn("Erro ao atualizar posi\xE7\xE3o:", error);
    playerDuration.set({ duration: 0, position: 0 });
    progressPercent.set(0);
  }
}
function startPositionTimer() {
  stopPositionTimer();
  const updateTimer = () => {
    const player = mediaState.get().lastPlayer;
    if (!player || player.playbackStatus !== Mpris.PlaybackStatus.PLAYING) {
      return;
    }
    const now = Date.now();
    const timeDiff = (now - lastUpdateTime) / 1e3;
    savedPosition += timeDiff;
    lastUpdateTime = now;
    const duration = playerDuration.get().duration;
    playerDuration.set({ ...playerDuration.get(), position: savedPosition });
    if (duration > 0) {
      const percent = savedPosition / duration * 100;
      progressPercent.set(Math.min(100, Math.max(0, percent)));
    }
    positionTimer = default2.timeout_add(default2.PRIORITY_DEFAULT, POSITION_UPDATE_INTERVAL, () => {
      updateTimer();
      return default2.SOURCE_REMOVE;
    });
  };
  updateTimer();
}
function stopPositionTimer() {
  if (positionTimer) {
    default2.source_remove(positionTimer);
    positionTimer = null;
  }
}
function disconnectFromPlayer() {
  const state = mediaState.get();
  if (updateTimeout) {
    default2.source_remove(updateTimeout);
    updateTimeout = null;
  }
  if (retryTimeout) {
    default2.source_remove(retryTimeout);
    retryTimeout = null;
  }
  stopPositionTimer();
  if (state.lastPlayer && state.handlers.length > 0) {
    state.handlers.forEach((handler) => {
      if (state.lastPlayer && GObject2.signal_handler_is_connected(state.lastPlayer, handler)) {
        try {
          state.lastPlayer.disconnect(handler);
        } catch (error) {
          console.warn("Erro ao desconectar handler:", error);
        }
      }
    });
  }
  mediaState.set({
    lastPlayer: null,
    handlers: [],
    currentCss: "stopped",
    currentState: Mpris.PlaybackStatus.STOPPED
  });
  savedPosition = 0;
  lastUpdateTime = 0;
  playerDuration.set({ duration: 0, position: 0 });
  progressPercent.set(0);
}
function isPlayerValid(player) {
  if (!player) return false;
  try {
    const busName = player.busName;
    return !!(busName && busName.length > 0);
  } catch (error) {
    console.warn("Player inv\xE1lido detectado:", error);
    return false;
  }
}
function connectToPlayer(player) {
  if (!isPlayerValid(player)) {
    console.warn("Tentativa de conectar a player inv\xE1lido");
    return;
  }
  disconnectFromPlayer();
  retryCount = 0;
  const handlers = [];
  try {
    handlers.push(
      player.connect("notify::playback-status", () => {
        updateMediaState(player);
        if (player.playbackStatus === Mpris.PlaybackStatus.PLAYING) {
          startPositionTimer();
        } else {
          stopPositionTimer();
          updatePosition();
        }
      }),
      player.connect("notify::title", () => updateMediaState(player)),
      player.connect("notify::artist", () => updateMediaState(player)),
      player.connect("notify::metadata", () => {
        updateMediaState(player);
        updatePosition();
      })
    );
    mediaState.set({
      ...mediaState.get(),
      lastPlayer: player,
      handlers
    });
    updateMediaState(player);
    updatePosition();
    if (player.playbackStatus === Mpris.PlaybackStatus.PLAYING) {
      startPositionTimer();
    }
  } catch (error) {
    console.error("Erro ao conectar aos sinais do player:", error);
    handlers.forEach((handler) => {
      try {
        if (GObject2.signal_handler_is_connected(player, handler)) player.disconnect(handler);
      } catch (error2) {
        console.error("Erro ao desconectar o handler:", error2);
      }
    });
  }
}
function updateMediaState(player) {
  if (updateTimeout) {
    default2.source_remove(updateTimeout);
    updateTimeout = null;
  }
  updateTimeout = default2.timeout_add(default2.PRIORITY_DEFAULT, DEBOUNCE_DELAY, () => {
    executeUpdateMediaState(player);
    updateTimeout = null;
    return default2.SOURCE_REMOVE;
  });
}
function executeUpdateMediaState(player) {
  if (!player) {
    mediaState.set({
      ...mediaState.get(),
      currentCss: "stopped",
      currentState: Mpris.PlaybackStatus.STOPPED
    });
    return;
  }
  if (!isPlayerValid(player)) {
    const nextPlayer = findBestPlayer();
    if (nextPlayer && nextPlayer !== player) {
      connectToPlayer(nextPlayer);
      return;
    } else {
      mediaState.set({
        ...mediaState.get(),
        currentCss: "stopped",
        currentState: Mpris.PlaybackStatus.STOPPED
      });
      return;
    }
  }
  try {
    const title = player.title || "T\xEDtulo desconhecido";
    const artist = player.artist || "Artista desconhecido";
    const status = player.playbackStatus;
    switch (status) {
      case Mpris.PlaybackStatus.PLAYING:
        mediaState.set({
          ...mediaState.get(),
          currentCss: "playing",
          currentState: Mpris.PlaybackStatus.PLAYING
        });
        break;
      case Mpris.PlaybackStatus.PAUSED:
        mediaState.set({
          ...mediaState.get(),
          currentCss: "paused",
          currentState: Mpris.PlaybackStatus.PAUSED
        });
        break;
      case Mpris.PlaybackStatus.STOPPED:
      default:
        mediaState.set({
          ...mediaState.get(),
          currentCss: "stopped",
          currentState: Mpris.PlaybackStatus.STOPPED
        });
        break;
    }
  } catch (error) {
    console.warn("Erro ao acessar propriedades do player MPRIS:", error);
    const nextPlayer = findBestPlayer();
    if (nextPlayer && nextPlayer !== player) {
      connectToPlayer(nextPlayer);
    } else {
      mediaState.set({
        ...mediaState.get(),
        currentCss: "stopped",
        currentState: Mpris.PlaybackStatus.STOPPED
      });
    }
  }
}
function findBestPlayer() {
  try {
    const players = mpris.players;
    if (players.length === 0) return null;
    const validPlayers = players.filter((p) => {
      const valid = isPlayerValid(p);
      return valid;
    });
    if (validPlayers.length === 0) return null;
    const playingPlayer = validPlayers.find((p) => {
      try {
        return p.playbackStatus === Mpris.PlaybackStatus.PLAYING;
      } catch {
        return false;
      }
    });
    if (playingPlayer) return playingPlayer;
    const pausedPlayer = validPlayers.find((p) => {
      try {
        return p.playbackStatus === Mpris.PlaybackStatus.PAUSED;
      } catch {
        return false;
      }
    });
    if (pausedPlayer) return pausedPlayer;
    return validPlayers[0];
  } catch (error) {
    console.error("Erro ao buscar players:", error);
    return null;
  }
}
function initializeMpris() {
  const tryInitialize = () => {
    const initialPlayer = findBestPlayer();
    if (initialPlayer) {
      connectToPlayer(initialPlayer);
      retryCount = 0;
    } else {
      if (retryCount < MAX_RETRIES) {
        retryCount++;
        const delay = RETRY_DELAY * retryCount;
        retryTimeout = default2.timeout_add(default2.PRIORITY_DEFAULT, delay, () => {
          tryInitialize();
          retryTimeout = null;
          return default2.SOURCE_REMOVE;
        });
      }
    }
  };
  default2.timeout_add(default2.PRIORITY_DEFAULT, 500, () => {
    tryInitialize();
    return default2.SOURCE_REMOVE;
  });
}
var mprisHandlers = [];
function setupMprisHandlers() {
  try {
    mprisHandlers = [
      mpris.connect("player-added", (_, player) => {
        default2.timeout_add(default2.PRIORITY_DEFAULT, 200, () => {
          const currentPlayer = mediaState.get().lastPlayer;
          if (!currentPlayer || !isPlayerValid(currentPlayer)) {
            connectToPlayer(player);
          } else {
            try {
              if (isPlayerValid(player) && player.playbackStatus === Mpris.PlaybackStatus.PLAYING) {
                connectToPlayer(player);
              }
            } catch (error) {
              console.warn("Erro ao verificar status do novo player:", error);
            }
          }
          return default2.SOURCE_REMOVE;
        });
      }),
      mpris.connect("player-closed", (_, player) => {
        const currentPlayer = mediaState.get().lastPlayer;
        if (currentPlayer === player) {
          default2.timeout_add(default2.PRIORITY_DEFAULT, 100, () => {
            const nextPlayer = findBestPlayer();
            if (nextPlayer) connectToPlayer(nextPlayer);
            else disconnectFromPlayer();
            return default2.SOURCE_REMOVE;
          });
        }
      })
    ];
  } catch (error) {
    console.error("Erro ao configurar handlers MPRIS:", error);
  }
}
var setupButton = (action) => (self) => {
  const click = new Gtk4.GestureClick();
  click.set_button(Gdk2.BUTTON_PRIMARY);
  const clickHandler = click.connect("pressed", () => {
    const player = mediaState.get().lastPlayer;
    if (!player || !isPlayerValid(player)) {
      console.warn("Player inv\xE1lido ou inexistente");
      return;
    }
    try {
      switch (action) {
        case "previous":
          if (player.canGoPrevious) player.previous();
          break;
        case "next":
          if (player.canGoNext) player.next();
          break;
        case "playpause":
          if (player.canPlay || player.canPause) player.play_pause();
          break;
      }
      default2.timeout_add(default2.PRIORITY_DEFAULT, 100, () => {
        executeUpdateMediaState(player);
        return default2.SOURCE_REMOVE;
      });
    } catch (error) {
      console.warn(`Erro ao executar a\xE7\xE3o ${action}:`, error);
      const nextPlayer = findBestPlayer();
      if (nextPlayer) connectToPlayer(nextPlayer);
    }
  });
  self.add_controller(click);
  self._clickHandler = clickHandler;
  self._clickController = click;
};
function PlayerSlider() {
  return /* @__PURE__ */ jsxs("box", { cssClasses: ["PlayerSlider"], children: [
    /* @__PURE__ */ jsx2(Slider, { cssClasses: ["Slider"], value: bind(progressPercent), min: 0, max: 100, step: 1, sensitive: false, drawValue: false }),
    /* @__PURE__ */ jsx2("label", { cssClasses: ["TimeLabel"], label: bind(playerDuration).as((pd) => `${formatTime2(pd.position)} / ${formatTime2(pd.duration)}`) })
  ] });
}
function PlayerInfo() {
  return /* @__PURE__ */ jsxs("box", { cssClasses: ["PlayerInfo"], orientation: Gtk4.Orientation.VERTICAL, hexpand: true, vexpand: true, children: [
    /* @__PURE__ */ jsxs("box", { cssClasses: ["Info"], orientation: Gtk4.Orientation.VERTICAL, hexpand: true, vexpand: true, children: [
      /* @__PURE__ */ jsx2("label", { cssClasses: ["Title"], label: bind(mediaState).as((c) => c.lastPlayer?.title ?? ""), ellipsize: 3, maxWidthChars: 15, widthChars: 30 }),
      /* @__PURE__ */ jsx2("label", { cssClasses: ["Artist"], label: bind(mediaState).as((c) => c.lastPlayer?.artist ?? ""), ellipsize: 3, maxWidthChars: 15, widthChars: 30 }),
      /* @__PURE__ */ jsx2("label", { cssClasses: ["Album"], label: bind(mediaState).as((c) => c.lastPlayer?.album ?? ""), ellipsize: 3, maxWidthChars: 15, widthChars: 30 })
    ] }),
    /* @__PURE__ */ jsxs("box", { cssClasses: ["LowerPart"], halign: Gtk4.Align.CENTER, orientation: Gtk4.Orientation.VERTICAL, hexpand: true, vexpand: true, children: [
      /* @__PURE__ */ jsx2(PlayerSlider, {}),
      /* @__PURE__ */ jsxs("box", { cssClasses: ["Controllers"], halign: Gtk4.Align.CENTER, children: [
        /* @__PURE__ */ jsx2(
          "box",
          {
            cssClasses: ["Previous"],
            setup: setupButton("previous"),
            sensitive: bind(mediaState).as((c) => c.lastPlayer?.canGoPrevious ?? false),
            child: /* @__PURE__ */ jsx2("image", { iconSize: Gtk4.IconSize.LARGE, iconName: PlayerButtonIcons.previous })
          }
        ),
        /* @__PURE__ */ jsx2(
          "box",
          {
            cssClasses: ["PlayPause"],
            setup: setupButton("playpause"),
            sensitive: bind(mediaState).as((c) => (c.lastPlayer?.canPlay && c.lastPlayer?.canPause) ?? false),
            child: /* @__PURE__ */ jsx2("image", { iconSize: Gtk4.IconSize.LARGE, iconName: bind(mediaState).as((c) => c.lastPlayer?.playbackStatus === Mpris.PlaybackStatus.PLAYING ? PlayerButtonIcons.paused : PlayerButtonIcons.playing) })
          }
        ),
        /* @__PURE__ */ jsx2(
          "box",
          {
            cssClasses: ["Next"],
            setup: setupButton("next"),
            sensitive: bind(mediaState).as((c) => c.lastPlayer?.canGoNext ?? false),
            child: /* @__PURE__ */ jsx2("image", { iconSize: Gtk4.IconSize.LARGE, iconName: PlayerButtonIcons.next })
          }
        )
      ] })
    ] })
  ] });
}
function MprisInfo() {
  return /* @__PURE__ */ jsx2("label", { cssClasses: ["MprisInfo"], label: bind(mediaState).as((c) => formatState(c.currentState)), widthChars: 12 });
}
function MprisPlayer() {
  return /* @__PURE__ */ jsx2(
    Overlay,
    {
      cssClasses: ["MprisPlayer"],
      setup: (self) => {
        const cava = Cava();
        const playerInfo = PlayerInfo();
        self.set_child(cava);
        self.add_overlay(playerInfo);
        self.set_measure_overlay(playerInfo, true);
        self.set_clip_overlay(playerInfo, false);
      },
      overflow: Gtk4.Overflow.HIDDEN
    }
  );
}
function Media() {
  setupMprisHandlers();
  initializeMpris();
  return /* @__PURE__ */ jsx2(
    "box",
    {
      cssClasses: ["Media"],
      child: /* @__PURE__ */ jsx2(
        "menubutton",
        {
          hexpand: true,
          alwaysShowArrow: false,
          sensitive: bind(mediaState).as((c) => c.lastPlayer !== null),
          child: /* @__PURE__ */ jsx2(MprisInfo, {}),
          popover: /* @__PURE__ */ jsx2("popover", { child: /* @__PURE__ */ jsx2(MprisPlayer, {}) })
        }
      )
    }
  );
}

// modules/Workspaces.tsx
import AstalHyprland from "gi://AstalHyprland?version=0.1";
var hyprland = AstalHyprland.get_default();
var focusedWorkspace = bind(hyprland, "focusedWorkspace");
var workspaceData = Variable.derive([bind(hyprland, "workspaces")], (workspaces) => {
  const sorted = workspaces.sort((a, b) => a.id - b.id);
  return {
    first: sorted[0] || null,
    second: sorted[1] || null,
    third: sorted[2] || null,
    rest: sorted.slice(3)
  };
});
var clickHandlers = /* @__PURE__ */ new WeakMap();
function setupWorkspaceClick(widget, workspaceId) {
  if (!clickHandlers.has(widget)) {
    const click = new Gtk4.GestureClick();
    click.connect("pressed", () => {
      if (focusedWorkspace.get().id !== workspaceId) hyprland.dispatch("workspace", `${workspaceId}`);
    });
    widget.add_controller(click);
    clickHandlers.set(widget, click);
  }
}
function Workspace({ workspace, isInPopover = false }) {
  const baseClasses = isInPopover ? ["Workspace", "WorkspacePopoverItem"] : ["Workspace"];
  return /* @__PURE__ */ jsx2(
    "label",
    {
      setup: (self) => setupWorkspaceClick(self, workspace.id),
      cssClasses: focusedWorkspace.as((focused) => [...baseClasses, workspace.id === focused.id ? "Active" : "Inactive"]),
      label: `${workspace.id}`
    }
  );
}
function MainWorkspace({ workspace }) {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      setup: (self) => {
        const click = new Gtk4.GestureClick();
        click.connect("pressed", () => {
          const ws = workspace.get();
          if (ws && ws.id !== focusedWorkspace.get().id) hyprland.dispatch("workspace", `${ws.id}`);
        });
        self.add_controller(click);
      },
      cssClasses: bind(Variable.derive([focusedWorkspace, workspace], (focused, ws) => {
        if (!ws) return ["Workspace", "Inactive"];
        return ["Workspace", ws.id === focused.id ? "Active" : "Inactive"];
      })),
      label: bind(workspace).as((w) => `${w?.id ?? " "}`)
    }
  );
}
var chunkArray = (array, size) => {
  const result = [];
  for (let i = 0; i < array.length; i += size) {
    result.push(array.slice(i, i + size));
  }
  return result;
};
function WorkspacePopover() {
  return /* @__PURE__ */ jsx2(
    "popover",
    {
      cssClasses: ["WorkspacePopover"],
      child: /* @__PURE__ */ jsx2("box", { vertical: true, cssClasses: ["WorkspacePopoverContent"], children: bind(workspaceData).as(({ rest }) => {
        const rows = chunkArray(rest, 4);
        return rows.map((rowWorkspaces, index) => /* @__PURE__ */ jsx2("box", { cssClasses: ["WorkspaceRow"], homogeneous: true, spacing: 4, children: rowWorkspaces.map((workspace) => /* @__PURE__ */ jsx2(Workspace, { workspace, isInPopover: true })) }));
      }) })
    }
  );
}
function MoreWorkspacesButton() {
  return /* @__PURE__ */ jsx2(
    "menubutton",
    {
      cssClasses: ["MoreWorkspacesButton"],
      sensitive: bind(workspaceData).as(({ rest }) => rest.length > 0),
      child: /* @__PURE__ */ jsx2("label", { label: "+" }),
      popover: WorkspacePopover()
    }
  );
}
function Workspaces() {
  return /* @__PURE__ */ jsxs("box", { cssClasses: ["Workspaces"], onDestroy: () => workspaceData.drop(), children: [
    /* @__PURE__ */ jsx2(MainWorkspace, { workspace: Variable.derive([workspaceData], (data) => data.first) }),
    /* @__PURE__ */ jsx2(MainWorkspace, { workspace: Variable.derive([workspaceData], (data) => data.second) }),
    /* @__PURE__ */ jsx2(MainWorkspace, { workspace: Variable.derive([workspaceData], (data) => data.third) }),
    /* @__PURE__ */ jsx2(MoreWorkspacesButton, {})
  ] });
}

// modules/Clients.tsx
import AstalHyprland2 from "gi://AstalHyprland?version=0.1";
var hyprland2 = AstalHyprland2.get_default();
var focusedClient = bind(hyprland2, "focusedClient");
var clients = bind(hyprland2, "clients");
var clientData = Variable.derive([clients, focusedClient], (allClients, focused) => {
  const filtered = focused ? allClients.filter((client) => client.address !== focused.address) : allClients;
  const title = focused?.title?.replace(/^./, (char) => char.toUpperCase()) ?? allClients.length.toString();
  return {
    filtered,
    title,
    hasMultiple: allClients.length > 1
  };
});
var clientClickHandlers = /* @__PURE__ */ new WeakMap();
function setupClientClick(widget, clientAddress) {
  if (!clientClickHandlers.has(widget)) {
    const click = new Gtk4.GestureClick();
    click.connect("pressed", () => {
      hyprland2.dispatch("focuswindow", `address:0x${clientAddress}`);
    });
    widget.add_controller(click);
    clientClickHandlers.set(widget, click);
  }
}
function ActiveClient() {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      cssClasses: ["Client"],
      widthChars: 24,
      maxWidthChars: 21,
      ellipsize: 3,
      label: bind(clientData).as(({ title }) => title)
    }
  );
}
function ClientEntry(client) {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      cssClasses: ["ClientEntry"],
      setup: (self) => setupClientClick(self, client.address),
      maxWidthChars: 22,
      ellipsize: 3,
      label: client.title.replace(/^./, (char) => char.toUpperCase())
    }
  );
}
function ClientsPopover() {
  return /* @__PURE__ */ jsx2("box", { cssClasses: ["ClientsPopover"], orientation: Gtk4.Orientation.VERTICAL, children: bind(clientData).as(({ filtered }) => filtered.map((client) => ClientEntry(client))) });
}
function Clients() {
  return /* @__PURE__ */ jsx2(
    "menubutton",
    {
      cssClasses: ["Clients"],
      sensitive: bind(clientData).as(({ hasMultiple }) => hasMultiple),
      child: ActiveClient(),
      popover: /* @__PURE__ */ jsx2("popover", { child: ClientsPopover() }),
      onDestroy: () => {
        clientData.drop();
      }
    }
  );
}

// widget/Bar.tsx
function Bar(gdkmonitor) {
  const { TOP, LEFT, RIGHT } = Astal6.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      namespace: "AstalBar",
      cssClasses: ["Bar"],
      visible: true,
      gdkmonitor,
      exclusivity: Astal6.Exclusivity.EXCLUSIVE,
      anchor: TOP | RIGHT | LEFT,
      application: app_default,
      child: /* @__PURE__ */ jsxs("box", { cssClasses: ["Bar"], halign: Gtk4.Align.FILL, homogeneous: true, children: [
        /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, children: /* @__PURE__ */ jsx2(SystemTray, {}) }),
        /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.CENTER, children: [
          /* @__PURE__ */ jsx2(Clients, {}),
          /* @__PURE__ */ jsx2(Media, {}),
          /* @__PURE__ */ jsx2(Workspaces, {})
        ] }),
        /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.END, children: [
          /* @__PURE__ */ jsx2(MiniTime, {}),
          /* @__PURE__ */ jsx2(AudioControl, {}),
          /* @__PURE__ */ jsx2(SystemMonitor, {})
        ] })
      ] })
    }
  );
}

// app.ts
function setupMonitors() {
  const activeMonitors = /* @__PURE__ */ new Set();
  function updateMonitors() {
    const currentMonitors = app_default.get_monitors();
    const currentMonitorIds = new Set(currentMonitors.map((m) => m.get_connector()));
    currentMonitors.forEach((monitor) => {
      if (!activeMonitors.has(monitor)) {
        activeMonitors.add(monitor);
        Bar(monitor);
      }
    });
    const removedMonitors = [];
    activeMonitors.forEach((monitor) => {
      if (!currentMonitorIds.has(monitor.get_connector())) {
        removedMonitors.push(monitor);
      }
    });
    removedMonitors.forEach((monitor) => {
      activeMonitors.delete(monitor);
      console.log(`Monitor removido: ${monitor}`);
    });
  }
  updateMonitors();
  app_default.notify("monitors");
  app_default.connect("notify::monitors", () => updateMonitors());
}
app_default.start({
  css: styles_default,
  main() {
    setupMonitors();
  }
});
//# sourceMappingURL=data:application/json;base64,
